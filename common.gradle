apply plugin: 'maven-publish'
apply plugin: 'fabric-loom'
apply plugin: 'com.replaymod.preprocess'
apply plugin: 'me.fallenbreath.yamlang'

int mcVersion = project.mcVersion

repositories {
    // Fabric ASM and MixinSquared
    maven { url 'https://jitpack.io' }
    // Cloth Config
    maven { url 'https://maven.shedaniel.me/' }
    // Mod Menu and Trinkets
    maven { url 'https://maven.terraformersmc.com/releases/' }
    // Reinforced Core and Shulkers
    maven { url 'https://raw.githubusercontent.com/Aton-Kish/mcmod/maven' }
    // Quick Shulker deps
    maven { url 'https://maven.kyrptonaught.dev' }
    // Cardinal Components API (required by Trinkets)
    maven { url 'https://maven.ladysnake.org/releases' }
    // Spectrelib (required by Shulker Box Slot)
    maven { url 'https://maven.theillusivec4.top/' }
    // Modrinth Maven for other compat tested mods
    maven { url 'https://api.modrinth.com/maven' }
}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
    modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}

dependencies {
    // loom
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // dependencies
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // optional dependencies
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modApi "com.terraformersmc:modmenu:${project.modmenu_version}"

    // libraries
    // include modImplementation("com.github.Fallen-Breath:conditional-mixin:${project.conditionalmixin_version}")
    include modImplementation("com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}")
    include modApi("io.hotmoka:toml4j:${project.toml4j_version}") {
        exclude(module: "gson")
    }
    include(implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:${project.mixinsquared_version}")))

    // mods tested for compatibility
    // - Reinforced Shulkers
    if (project.reinfshulkers == "true") {
        modCompileOnly("atonkish.reinfshulker:reinforced-shulker-boxes:${project.reinfshulkers_version}") {
            exclude(group: "net.fabricmc.fabric-api")
            exclude(group: "atonkish.reinfcore")
            exclude(group: "atonkish.reinfchest")
            exclude(group: "net.kyrptonaught")
            exclude(group: "com.misterpemodder")
        }
        modCompileOnly("atonkish.reinfcore:reinforced-core:${project.reinfcore_version}") {
            exclude(group: "net.fabricmc.fabric-api")
            exclude(group: "com.terraformersmc")
            exclude(group: "me.shedaniel.cloth")
        }
    }
    // - Shulker+
    if (project.shulker_plus == "true") {
        modCompileOnly "maven.modrinth:shulker+:${project.shulker_plus_version}"
    }
    // - Split Shulker Boxes
    if (project.split_shulkers == "true") {
        modCompileOnly "maven.modrinth:split-shulker-boxes:${project.split_shulkers_version}"
    }
    // - Quick Shulker
    if (project.quickshulker == "true") {
        modCompileOnly "maven.modrinth:quickshulker:${project.quickshulker_version}"
        modCompileOnly "net.kyrptonaught:shulkerutils:${project.shulkerutils_version}"
        modCompileOnly "net.kyrptonaught:kyrptconfig:${project.kyrptconfig_version}"
    }
    // - Shulker Box Slot
    if (project.shulker_slot == "true") {
        modCompileOnly "maven.modrinth:shulker-box-slot:${project.shulker_slot_version}"
        modCompileOnly("dev.emi:trinkets:${project.trinkets_version}") { exclude(group: "net.fabricmc.fabric-api") }
        modCompileOnly("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}") { exclude(group: "net.fabricmc.fabric-api") }
        modCompileOnly("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}") { exclude(group: "net.fabricmc.fabric-api") }
        modCompileOnly("dev.onyxstudios.cardinal-components-api:cardinal-components-item:${project.cca_version}") { exclude(group: "net.fabricmc.fabric-api") }
        if (project.spectrelib == "true") {
            modCompileOnly("com.illusivesoulworks.spectrelib:spectrelib-fabric:${project.spectrelib_version}") { exclude(group: "net.fabricmc.fabric-api") }
        }
    }
    // - Click Opener
    if (project.clickopener == "true") {
        modCompileOnly "maven.modrinth:clickopener:${project.clickopener_version}"
    }
}

String MIXIN_CONFIG_PATH = 'enchantedshulkers.mixins.json'
String LANG_DIR = 'assets/enchantedshulkers/lang'
JavaVersion JAVA_COMPATIBILITY
if (mcVersion >= 11800) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_17
} else if (mcVersion >= 11700) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_16
} else {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_1_8
}

loom {
    accessWidenerPath = file("${project.mod_id}.accesswidener")

    runConfigs.all {
        // to make sure it generates all "Minecraft Client (:subproject_name)" applications
        ideConfigGenerated = true
        runDir '../../run'
        vmArgs '-Dmixin.debug.export=true'
    }
}

remapJar {
    remapperIsolation = true
}

sourceCompatibility = JAVA_COMPATIBILITY
targetCompatibility = JAVA_COMPATIBILITY

String versionSuffix = ''
// detect github action environment variables
// https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
if (System.getenv("BUILD_RELEASE") != "true") {
    String buildNumber = System.getenv("BUILD_ID")
    versionSuffix += buildNumber != null ? ('+build.' + buildNumber) : '-SHAPSHOT'
}
String fullModVersion = project.mod_version + versionSuffix

version = 'v' + fullModVersion
group = project.maven_group
archivesBaseName = project.archives_base_name + '-mc' + project.minecraft_version

// See https://youtrack.jetbrains.com/issue/IDEA-296490
// if IDEA complains about "Cannot resolve resource filtering of MatchingCopyAction" and you want to know why
processResources {
    from "${project.mod_id}.accesswidener"

    inputs.property "id", project.mod_id
    inputs.property "name", project.mod_name
    inputs.property "version", fullModVersion
    inputs.property "minecraft_dependency", project.minecraft_dependency

    filesMatching("fabric.mod.json") {
        def valueMap = [
                "id": project.mod_id,
                "name": project.mod_name,
                "version": fullModVersion,
                "minecraft_dependency": project.minecraft_dependency,
                "fabric_loader": project.loader_version,
                "fabric_api_mod_id": project.fabric_api_mod_id,
        ]
        expand valueMap
    }

    filesMatching(MIXIN_CONFIG_PATH) {
        expand "compatibility_level": "JAVA_${JAVA_COMPATIBILITY.ordinal() + 1}"
    }
}

// https://github.com/Fallen-Breath/yamlang
yamlang {
    targetSourceSets = [sourceSets.main]
    inputDir = LANG_DIR
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${project.archives_base_name}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId archivesBaseName

            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
